#!/bin/bash

#depends: openssl sed cryptsetup blkid findfs sort


#public commands
open ()
{
	local STATE="opening"
	if [ ! -f $conf ]; then 
		msg "Error" "config does not exist"
	elif [ ! -f $keyfile ]; then
		msg "Error" "keyfile does not exist"
	else
		key_initilize
		devices=`sed 's/#.*//g' $conf`
		for uuid in $devices
		do
			DEV=`findfs UUID=$uuid`
			NAME="$POOL-$uuid"
			if [ ! -e $DEV ]; then
				msg "Warning" "UUID=$uuid does not exist"
			elif [ -e "/dev/mapper/$NAME" ]; then
				msg "Warning" "UUID=$uuid is already open"
			elif [ -e "/dev/disk/by-id/dm-uuid-CRYPT-*-${uuid//-}-*" ]; then
				msg "Warning" "UUID=$uuid is already open"
			else
				echo -n $key | cryptsetup open -d - $DEV $NAME
			fi
		done
	fi
}

create_config ()
{
	local STATE="creating config"
	if [ ! -f $conf ]; then
		touch ${conf}
		chmod 644 ${conf}
		echo "Created $POOL"
		add $@
	else
		msg "Error" "config exists"
	fi
}

create_pool ()
{
	local STATE="creating pool"
	keygen
	create_config $@
}

add ()
{
	local STATE="adding"
	if key_isInitilized; then		# Only run if inititilized
		for input in "$@"
		do
			DEV=$(findfs $input)
			if [ -e $DEV ]; then
				if cryptsetup isLuks $DEV; then
					echo -n $key | cryptsetup luksAddKey $DEV -d -
					echo $(blockUUID $DEV) \#$DEV >> $conf
					echo "Added $input"
				else
					echo -n $key | cryptsetup luksFormat $DEV -d -

					echo $(blockUUID $DEV) \#$DEV >> $conf
					echo "Added $input"
				fi
			else
				msg "Warning" "could not find ${DEV}"
			fi
		done
	fi
	config_deduplicate
}

keygen ()
{
	local STATE="generating key"
	if [ -f $keyfile ]; then
		msg "Error" "keyfile exists"
	else
		key=$(dd bs=512 count=4 if=/dev/urandom)
		echo -n $key | openssl $crypto -out $keyfile
		if [ -f $keyfile ]; then
			chmod 400 $keyfile
			echo "Key created!"
		else
			msg "Error" "keyfile not created"
		fi
	fi
}

#private commands

blockUUID ()
{
	blkid ${1} | sed 's/.*\ UUID=\"//;s/\".*//'
}

config_deduplicate ()
{
	tmp=/tmp/${POOL}.uuid
	cp $conf $tmp
	sort -u $tmp > $conf
	rm $tmp
	msg "Info" "UUIDs deduplicated"
}

key_isInitilized ()
{
	if [[ ${#key} -ne 1960 ]]; then
		return 1
	else
		return 0
	fi
}

key_initilize ()
{
	if key_isInitilized; then
		msg "Info" "key already inititilized"
	else
		key=$(openssl $crypto -d -in $keyfile)
		key_isInitilized || msg "Error" "unable to decrypt key"
	fi
}

usage ()
{
	echo "usage: swimming <pool> <command> [command arguments]"
	echo
	echo "commands:"
	echo "	create_config <devices>"
	echo "	create_pool <devices>"
	echo "	open"
	echo "	add <devices>"
	echo "	keygen"
}

msg ()
{
	echo "${1} ${STATE} ${POOL}: ${3}"
	if [[ ${1} == "Error" ]]; then
		exit 1
	fi
}



##MAIN RUN

POOL="${1}"
COMMAND="${2:-null}"
STATE="NULL"

shift;shift	#Now each parameter $1,2..etc correspond to devices 1,2,3,4

conf="/etc/swimming/${POOL}.uuid"
keyfile="/etc/swimming/${POOL}.enc"
crypto="aes-256-cbc"

case "$COMMAND" in
	open )
		open
		;;
	create_config )
		create_config $@
		;;
	create_pool )
		create_pool $@
		;;
	add )
		add $@
		;;
	keygen )
		keygen
		;;
	* )
		usage
		;;
esac
